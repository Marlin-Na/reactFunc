% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reactFunc-out.R
\name{reactFunc}
\alias{reactFunc}
\alias{reactArg}
\title{Build Cacheable Functions}
\usage{
reactFunc(ARGV, ...)

reactArg(name)
}
\arguments{
\item{ARGV}{A named list or vector that represent the formal arguments of the returned function.}

\item{...}{Name-expression pairs that describe the reactive expressions defined in the parent
environment of the returned function. The last one will be used as the returned value
of the returned function.  See example.}

\item{name}{A symbol that corresponds to one of the names of \code{ARGV} (one of the argument name).
See example.}
}
\value{
\code{reactFunc} returns a closure (function); \code{name} should be used inside the
    \code{...} arguments to describe the argument as a reactive source.
}
\description{
\code{reactFunc} is a function generator that returns a function that is cacheable when
combined with the use of \code{reactArg}.  See example.
}
\examples{
## Build
rf <- reactFunc(
    ARGV = alist(x = 42, y = ),
    x = reactArg(x),
    y = reactArg(y),
    a = {
        print("Getting a()...")
        Sys.sleep(0.5)
        x() + 1
    },
    b = {
        print("Getting b()...")
        Sys.sleep(0.5)
        y() + 1
    },
    ans = {
        print("Getting ans()")
        Sys.sleep(0.5)
        a() + b()
    }
)
## Properties
#1. Definition
rf
#2. First run
m <- 6; n <- 9
system.time(ans <- rf(x = m, y = n))
ans
#3. Seconde run with the same arguments
system.time(ans <- rf(x = m, y = n))
ans
#4. Third run with an updated argument
n <- 7
system.time(ans <- rf(x = m, y = n))
ans
#5. Change the value of `x` to default
system.time(ans <- rf(y = n))
ans
}
